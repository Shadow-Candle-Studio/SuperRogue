// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
Pixel2DAnimBlueprintGeneratedClass.cpp: The object generated by compiling a Pixel2DAnimBlueprint
=============================================================================*/

#include "Pixel2DAnimBlueprintGeneratedClass.h"
#include "Pixel2DAnimNode_Base.h"
#include "Pixel2DAnimInstance.h"

/////////////////////////////////////////////////////
// UPixel2DAnimBlueprintGeneratedClass

UPixel2DAnimBlueprintGeneratedClass::UPixel2DAnimBlueprintGeneratedClass(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
{
	RootAnimNodeIndex = INDEX_NONE;
}

void UPixel2DAnimBlueprintGeneratedClass::Link(FArchive& Ar, bool bRelinkExistingProperties)
{
	Super::Link(Ar, bRelinkExistingProperties);

	// @TODO: Shouldn't be necessary to clear these, but currently the class gets linked twice during compilation
	AnimNodeProperties.Empty();
	RootAnimNodeProperty = NULL;

	// Initialize derived members
	for (TFieldIterator<FProperty> It(this); It; ++It)
	{
		if (FStructProperty* StructProp = CastField<FStructProperty>(*It))
		{
			if (StructProp->Struct->IsChildOf(FPixel2DAnimNode_Base::StaticStruct()))
			{
				AnimNodeProperties.Add(StructProp);
			}
		}
	}

	// Pull info down from root anim class
	UPixel2DAnimBlueprintGeneratedClass* RootClass = this;
	while (UPixel2DAnimBlueprintGeneratedClass* NextClass = Cast<UPixel2DAnimBlueprintGeneratedClass>(RootClass->GetSuperClass()))
	{
		RootClass = NextClass;
	}

	if (RootClass != this)
	{
		// Copy root, state notifies and baked machines from the root class
		RootAnimNodeIndex = RootClass->RootAnimNodeIndex;
		//AnimNotifies = RootClass->AnimNotifies;
		BakedStateMachines = RootClass->BakedStateMachines;
	}

	if (AnimNodeProperties.Num() > 0)
	{
		const bool bValidRootIndex = (RootAnimNodeIndex >= 0) && (RootAnimNodeIndex < AnimNodeProperties.Num());
		if (bValidRootIndex)
		{
			RootAnimNodeProperty = AnimNodeProperties[AnimNodeProperties.Num() - 1 - RootAnimNodeIndex];
		}
		else
		{
			UE_LOG(LogAnimation, Warning, TEXT("Invalid animation root node index %d on '%s' (only %d nodes)"), RootAnimNodeIndex, *GetPathName(), AnimNodeProperties.Num());
			AnimNodeProperties.Empty();
		}
	}
}

void UPixel2DAnimBlueprintGeneratedClass::PurgeClass(bool bRecompilingOnLoad)
{
	Super::PurgeClass(bRecompilingOnLoad);

#if WITH_EDITORONLY_DATA
	AnimBlueprintDebugData = FPixel2DAnimBlueprintDebugData();
#endif

	BakedStateMachines.Empty();
}

void UPixel2DAnimBlueprintGeneratedClass::PostLoadDefaultObject(UObject* Object)
{
	Super::PostLoadDefaultObject(Object);
	CastChecked<UPixel2DAnimInstance>(Object)->PreInitializeRootNode();
}
